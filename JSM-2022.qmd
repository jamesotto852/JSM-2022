---
format: 
  revealjs:
    theme: [simple, presentation.css]
    auto-animate-easing: ease-in-out
    footer: "James Otto (Baylor University)"
    self-contained: false
    slide-number: true
    df-print: paged
    bibliography: bibliography.bib
    csl: annals-of-botany.csl
knitr:
  opts_chunk: 
    fig-format: png
---

---
nocite: |
  @*
---

```{r setup_environment}
#| include: false

library("here")
library("tidyverse") 
library("patchwork")
library("ggdensity")

theme_set(theme_bw(13)) 

theme_update(
  panel.grid.minor = element_blank()
)

```

---

<h1> **ggdensity** </h1>

<h2> Improved density visualization in R</h2>

<hr>

<h3> **James Otto**, David Kahle </h3>

<h3> Baylor University  </h3>

<h3> 8/7/2022 </h3>

![](Images/logo.png){.absolute top=270 left=670 width="300"}

::: footer

:::

# Introduction

---

::: {.incremental}
- **ggplot2** includes several ways to estimate and visualize densities for uni- and bivariate data
  - Limited by the difficulty of interpreting density height
- **ggdensity** provides interpretable visualizations via highest density regions
:::

## A Motivating Example{auto-animate=true}

```{r motivating-example-set-up}
set.seed(1)

n <- 2500

# Simulating data
df <- tibble(
  x = rnorm(n),
  y = rnorm(n)
)

p0 <- ggplot(df, aes(x, y)) +
  geom_point(alpha = 1, size = 1.5) +
  theme_bw(20) +
  theme(axis.title = element_blank()) +
  coord_fixed(xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5), expand = FALSE)

p1 <- p0 +
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())

p2 <- ggplot(df, aes(x, y)) +
  geom_density2d_filled() +
  scale_x_continuous(lim = c(-3.5, 3.5)) +
  scale_y_continuous(lim = c(-3.5, 3.5)) +
  coord_fixed(xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5), expand = FALSE) +
  theme_bw(20) +
  labs(fill = NULL) +
  theme(
    legend.position = "bottom",
    axis.title = element_blank()
    )

p3 <- ggplot(df, aes(x, y)) +
  geom_hdr() +
  coord_fixed(xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5), expand = FALSE) +
  theme_bw(22) +
  labs(alpha = NULL) +
  theme(
    axis.title = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    legend.position = "bottom"
  ) 

aligned_plots <- align_patches(p0, p1, p2, p3)
```

:::: {.columns}

::: {.column width="25%"}
:::

::: {.column width="50%"}
::: {data-id="motivating-ex-scatterplot"}
```{r}
#| fig-height: 10
#| fig-width: 9

aligned_plots[[1]]
```
:::
:::

::: {.column width="25%"}
:::

::::

## A Motivating Example{auto-animate=true}

:::: {.columns}

::: {.column width="50%"}
```{r motivating-example-2}
#| fig-height: 10
#| fig-width: 9

aligned_plots[[3]]

```
:::


::: {.column width="50%"}

::: {.r-stack}

::: {data-id="motivating-ex-scatterplot"}
::: {.fragment .fade-out fragment-index=1}
```{r motivating-example-3}
#| fig-height: 10
#| fig-width: 9

aligned_plots[[2]]

```
:::
::: 

::: {.fragment .fade-in fragment-index=1}
```{r motivating-example-4}
#| fig-height: 10
#| fig-width: 9

aligned_plots[[4]]

```
:::
:::

:::


::::


## Defining the HDR

::: {.fragment .fade-in fragment-index=1}
<div style = "margin-top: 1em;">
Let $f(x)$ be the density function of a random variable $X$.
Then the $100(1 - \alpha)\%$ highest density region (HDR) is the subset $R(f_{\alpha})$ of the sample space of $X$ such that
$R(f_{\alpha}) = \{x: f (x) \geq f_{\alpha}\}$ where $f_{\alpha}$ is the largest constant such that $\mathrm{P}\left\{{X \in R(f_{\alpha})}\right\} \geq 1 - \alpha$. 
</div>
:::

::: aside 
::: {.fragment .fade-in fragment-index=1}
@Hyndman1
:::
:::

  
# `geom_hdr()`

```{r}
set.seed(1)

df <- tibble(
  x = rnorm(1000),
  y = rnorm(1000)
)

p_points <- ggplot(df, aes(x, y)) +
  geom_point(size = .8) +
  coord_fixed(xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75), expand = FALSE) +
  theme_bw(9) 
  
p_norm_kde <- ggplot(df, aes(x, y)) +
  geom_hdr(xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75)) +
  coord_fixed(xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75), expand = FALSE) +
  theme_bw(9) +
  theme(legend.position = "none")

p_norm_hist <- ggplot(df, aes(x, y)) +
  geom_hdr(method = "histogram", xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75)) +
  coord_fixed(xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75), expand = FALSE) +
  theme_bw(9) +
  theme(legend.position = "none")

p_norm_param <- ggplot(df, aes(x, y)) +
  geom_hdr(method = "mvnorm", xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75)) +
  coord_fixed(xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75), expand = FALSE) +
  theme_bw(9) +
  theme(legend.position = "none")


aligned_plots <- align_patches(p_points, p_norm_kde, p_norm_param, p_norm_hist)

```

## {transition=fade}
```{r}
#| echo: true
#| eval: false

df <- tibble(x = rnorm(1000), y = rnorm(1000))

ggplot(df, aes(x, y)) + 
  geom_point()

```
```{r}
#| fig-height: 4

aligned_plots[[1]]
```

## {auto-animate=true transition=fade}

```{r}
#| echo: true
#| eval: false

df <- tibble(x = rnorm(1000), y = rnorm(1000))

ggplot(df, aes(x, y)) + 
  geom_hdr()

```
```{r}
#| fig-height: 4

aligned_plots[[2]]
```

## {auto-animate=true transition=fade}

```{r}
#| code-line-numbers: "|5"
#| echo: true
#| eval: false

df <- tibble(x = rnorm(1000), y = rnorm(1000))

ggplot(df, aes(x, y)) + 
  geom_hdr(
    method = "kde"
  )

```
```{r}
#| fig-height: 4

aligned_plots[[2]]
```


## {transition=fade}

```{r}
#| code-line-numbers: "5"
#| echo: true
#| eval: false

df <- tibble(x = rnorm(1000), y = rnorm(1000))

ggplot(df, aes(x, y)) + 
  geom_hdr(
    method = "mvnorm"
  )

```
```{r}
#| fig-height: 4

aligned_plots[[3]]
```
  
   
<!-- ## {auto-animate=true auto-animate-duration=".5" auto-animate-easing="linear"} -->
## {transition=fade}

```{r}
#| code-line-numbers: "5"
#| echo: true
#| eval: false

df <- tibble(x = rnorm(1000), y = rnorm(1000))

ggplot(df, aes(x, y)) + 
  geom_hdr(
    method = "histogram"
  )

```
```{r}
#| fig-height: 4

aligned_plots[[4]]
``` 

## {transition=fade}

```{r}
#| eval: false

library("purrr")

df_norm <- data.frame("x" = rnorm(5000), "y" = rnorm(5000))

df_norm_mix <- data.frame(
  "x" = rnorm(5000) + c(-1.5, 1.5),
  "y" = rnorm(5000) + c(1.5, -1.5)
)

df_exp <- data.frame("x" = rexp(5000, 1), "y" = rexp(5000, 1))

p_df <- function(df) {
  ggplot(df, aes(x, y)) +
    theme(
      legend.position = "none",
      axis.text.x = element_blank(), axis.ticks.x = element_blank(),
      axis.text.y = element_blank(), axis.ticks.y = element_blank(),
      axis.title = element_blank()
    )
}

p_row <- function(layer, title, ylabs = FALSE) {
  p_title <- grid::textGrob(title, gp = grid::gpar(fontsize = 18))

  p_norm <- p_df(df_norm) +
    layer +
    coord_fixed(xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5))

  p_norm_mix <- p_df(df_norm_mix) +
    layer +
    coord_fixed(xlim = c(-4.5, 4.5), ylim = c(-4.5, 4.5))

  p_norm_exp <- p_df(df_exp) +
    layer + coord_fixed(xlim = c(-.25, 6), ylim = c(-.25, 6))

  list(p_title, p_norm, p_norm_mix, p_norm_exp)
}


geoms <- list(
  geom_point(size = .5, alpha = .6),
  # geom_density_2d_filled(),
  # extreme xlim, ylim ensure that HDRs aren't clipped
  geom_hdr(method = "kde", xlim = c(-10, 10), ylim = c(-10, 10)),
  geom_hdr(method = "mvnorm", xlim = c(-10, 10), ylim = c(-10, 10)),
  geom_hdr(method = "histogram"),
  geom_hdr(method = "freqpoly", xlim = c(-10, 10), ylim = c(-10, 10))
)

titles <- c(
  "",
  "kde",
  "mvnorm",
  "histogram",
  "freqpoly"
)

map2(geoms, titles, p_row) |>
  unlist(recursive = FALSE) |>
  wrap_plots(byrow = FALSE, nrow = 4, heights = c(.02, 1, 1, 1), widths = 1)

# dims:
# 2000 * 1220
```

![](Images/various_estimators.png){fig-align="center"}
  
  
## Palmer Penguins {transition=fade}
  
![](Images/gorman-penguins.jpg){fig-align="center"}
  
## Palmer Penguins {transition=fade}

<div style = "font-size: .5em; margin-top: 2em">

```{r}
library("palmerpenguins")

set.seed(1)

penguins |>
  # select(
  #   species,
  #   bill_length_mm,
  #   bill_depth_mm,
  #   flipper_length_mm,
  #   body_mass_g,
  #   island,
  #   sex,
  #   year
  # ) |>
  slice_sample(prop = 1)
```

</div>

---

## Palmer Penguins {.smaller transition=fade}
```{r}
p1 <- ggplot(penguins, aes(flipper_length_mm, bill_length_mm, fill = species)) +
  geom_point(position = "jitter", size = 2, shape = 21) +
  scale_fill_brewer(type = "qual") +
  coord_cartesian(xlim = c(174, 232), ylim = c(34, 56))

p2 <- ggplot(penguins, aes(flipper_length_mm, bill_length_mm, fill = species)) +
  geom_hdr(xlim = c(160, 250), ylim = c(30, 60), probs = c(.95, .8, .6, .3)) +
  scale_fill_brewer(type = "qual") +
  coord_cartesian(xlim = c(174, 232), ylim = c(34, 56))

p3 <- ggplot(penguins, aes(flipper_length_mm, bill_length_mm, fill = species)) +
  geom_hdr(xlim = c(160, 250), ylim = c(30, 60), probs = c(.95, .8, .6, .3)) +
  facet_wrap(vars(species)) +
  scale_fill_brewer(type = "qual") +
  coord_cartesian(xlim = c(174, 232), ylim = c(34, 56)) +
  scale_x_continuous(breaks = c(180, 200, 220))

aligned_plots <- align_patches(p1, p2, p3)
```
```{r}
aligned_plots[[1]]
```
 
## Palmer Penguins {.smaller transition=fade}
```{r}
aligned_plots[[2]]
``` 

## Palmer Penguins {.smaller transition=fade}
```{r}
aligned_plots[[3]]
```

  
# `geom_hdr_fun()`

---

```{r}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "|1|3-4"
#| fig-align: center

f <- function(x, y) dnorm(x) * dgamma(y, 5, 3)

ggplot() +
  geom_hdr_fun(fun = f, xlim = c(-4, 4), ylim = c(0, 5))
```
  
---

```{r}
#| output-location: slide
#| echo: true
#| code-line-numbers: "|1|3-4|6-7|9-16"
#| fig-height: 7

df <- data.frame(x = rexp(100, 1), y = rexp(100, 1))

# pdf for parametric density estimate
f <- \(x, y, lambda) dexp(x, lambda[1]) * dexp(y, lambda[2])

# estimate parameters governing joint pdf
lambda_hat <- apply(df, 2, mean)

# make plot
ggplot(df, aes(x, y)) +
  geom_hdr_fun(
    fun = f, args = list(lambda = lambda_hat),
    xlim = c(0, 7), ylim = c(0, 7) 
  ) +
  geom_point(fill = "lightgreen", shape = 21) +
  coord_fixed()
```


# misc. `geom`'s

---

```{r}
#| echo: true
#| eval: false

p <- ggplot(faithful, aes(eruptions, waiting))

p + geom_hdr_lines()
p + geom_hdr_points()
p + geom_hdr_rug()
```
```{r}
#| fig-height: 4.5 

p1 <- ggplot(faithful, aes(eruptions, waiting)) +
  geom_hdr_lines(xlim = c(0, 7), ylim = c(30, 110))

p2 <- ggplot(faithful, aes(eruptions, waiting)) +
  geom_hdr_points(xlim = c(0, 7), ylim = c(30, 110), size = 1) +
  theme(
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )

p3 <- ggplot(faithful, aes(eruptions, waiting)) +
  geom_point(size = 1) +
  geom_hdr_rug(length = unit(.5, "cm")) +
  theme(
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )

(p1 + p2 + p3) &
  theme(legend.position = "none") &
  coord_cartesian(
    xlim = c(.75, 6),
    ylim = c(35, 102)
  )
```


---

```{r}
#| echo: true
#| eval: false

p <- ggplot(faithful, aes(eruptions, waiting))

p + 
  geomtextpath::geom_textdensity2d(
    aes(level = after_stat(probs)),
    stat = "hdr_lines", alpha = 1
  )
```
```{r}
#| fig-height: 4.5 
#| fig-width: 7
#| fig-align: center

ggplot(faithful, aes(eruptions, waiting)) +
  geomtextpath::geom_textdensity2d(aes(level = after_stat(probs)), stat = "hdr_lines", alpha = 1, xlim = c(0, 7), ylim = c(30, 110)) +
  theme(legend.position = "none") +
  coord_cartesian(
    xlim = c(.75, 6),
    ylim = c(35, 102)
  )

```



## References

::: {#refs}
:::


## Thank you!

(to-do)


